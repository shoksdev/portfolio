# Generated by Django 4.2 on 2023-05-09 07:58

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserWH',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('position', models.CharField(max_length=50, verbose_name='Должность')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID Покупателя')),
                ('first_name', models.CharField(max_length=255, unique=True, verbose_name='Имя покупателя')),
                ('last_name', models.CharField(max_length=255, unique=True, verbose_name='Фамилия покупателя')),
                ('country', models.CharField(blank=True, max_length=255, null=True, verbose_name='Страна')),
                ('region', models.CharField(blank=True, max_length=255, null=True, verbose_name='Регион')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='Город')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Адрес')),
                ('postal_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='Почтовый индекс')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Номер телефона')),
                ('email', models.EmailField(max_length=254, verbose_name='Электронная почта')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID Товара')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Имя товара')),
                ('description', models.TextField(verbose_name='Описание товара')),
                ('sku', models.CharField(max_length=50, verbose_name='СКУ')),
                ('category', models.CharField(max_length=255, verbose_name='Категория товара')),
                ('quantity', models.IntegerField(default=0, verbose_name='Количество единиц товара')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
                ('units_in_stock', models.IntegerField(default=0, verbose_name='Единиц на складе')),
                ('units_on_order', models.IntegerField(default=0, verbose_name='Единиц под заказ')),
                ('reorder_level', models.IntegerField(default=0, verbose_name='Уровень заказа')),
                ('discontinued', models.BooleanField(default=False, verbose_name='Снято с производства')),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('supplier_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID Продавца')),
                ('company_name', models.CharField(max_length=255, unique=True, verbose_name='Название компании')),
                ('contact_name', models.CharField(max_length=255, unique=True, verbose_name='Имя контакта')),
                ('contact_title', models.CharField(max_length=255, verbose_name='Название контакта')),
                ('country', models.CharField(max_length=255, verbose_name='Страна')),
                ('region', models.CharField(max_length=255, verbose_name='Регион')),
                ('city', models.CharField(max_length=255, verbose_name='Город')),
                ('address', models.CharField(max_length=255, verbose_name='Адрес')),
                ('postal_code', models.CharField(max_length=255, verbose_name='Почтовый индекс')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Номер телефона')),
                ('email', models.EmailField(max_length=254, verbose_name='Электронная почта')),
                ('website', models.URLField(max_length=255, verbose_name='Веб-сайт')),
            ],
        ),
        migrations.CreateModel(
            name='ProductExpenses',
            fields=[
                ('expense_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID Расхода')),
                ('quantity', models.IntegerField(verbose_name='Количество товара')),
                ('expense_date', models.DateField(verbose_name='Дата расхода')),
                ('customer_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.customer', verbose_name='ID Продавца')),
                ('product_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.product', verbose_name='ID Продукта')),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='ProductArrivals',
            fields=[
                ('arrival_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID Прихода')),
                ('quantity', models.IntegerField(verbose_name='Количество товара')),
                ('arrival_date', models.DateField(verbose_name='Дата прихода')),
                ('product_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.product', verbose_name='ID Продукта')),
                ('supplier_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.supplier', verbose_name='ID Продавца')),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
    ]
